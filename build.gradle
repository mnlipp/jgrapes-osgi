buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:6.2.0"
        classpath 'org.ajoberstar.grgit:grgit-gradle:4.1.0'
        classpath 'org.ajoberstar:gradle-git-publish:3.0.0'
    }
}

apply plugin: 'biz.aQute.bnd.workspace'
apply plugin: 'org.ajoberstar.git-publish'

ext {
	isCiBuild = System.getenv().get("CI") == 'true'
    isJitPackBuild = System.getenv().get("JITPACK") == 'true'
}

// Prepare github authentication for plugins
if (System.properties['org.ajoberstar.grgit.auth.username'] == null) {
	System.setProperty('org.ajoberstar.grgit.auth.username',
		System.getenv("GH_TOKEN") ?: project.properties['github.token'] ?: "nouser")
}

allprojects {
    repositories {
        jcenter()
        // My packages, until linked
        // maven { url 'https://dl.bintray.com/mnlipp/jgrapes' }
        
        mavenCentral()
        // Snapshots
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        // Experimental, not sure if this is the way to go...
        maven { url 'https://jitpack.io' }
    }
}

/* Configure the subprojects */
subprojects {
    apply from: "${project.rootDir}/gradle/subprojects.gradle"
    // Must be applied after configuring the subprojects,
    // can therefore not be applied in allprojects.
    apply from: "${project.rootDir}/gradle/eclipse.gradle"
}

configurations {
    markdownDoclet
    javadocTaglets
}

dependencies {
    markdownDoclet "org.jdrupes.mdoclet:doclet:3.1.0"
    javadocTaglets "org.jdrupes.taglets:plantuml-taglet:2.0.0"
}

var docDestinationDir = file("../jgrapes.gh-pages/javadoc-osgi")

task javadocResources(type: Copy) {
    into docDestinationDir
    from ("${rootProject.rootDir}/misc") {
        include '*.woff2'
    }
}

task java11doc(type: JavaExec) {
    // Does not work on JitPack, no /usr/bin/dot
    enabled = JavaVersion.current() == JavaVersion.VERSION_17 && !isJitPackBuild

    // Make sure that other projects' compileClasspaths are resolved
    rootProject.subprojects
        .findAll({project -> project.name.startsWith("org.jgrapes")})
        .each{project -> dependsOn project.tasks.assemble}
    
    inputs.file rootProject.file('overview.md')
    
    classpath = files(rootProject.subprojects
        .findAll({project -> project.name.startsWith("org.jgrapes")})
        .collect {project -> project.sourceSets.main.compileClasspath})
    var sourceDirs = rootProject.subprojects
        .findAll({project -> project.name.startsWith("org.jgrapes")
                && !project.name.startsWith("org.jgrapes.osgi.demo")})
        .collect{project -> project.sourceSets.main.allJava.getSrcDirs() }
        .flatten().findAll(dir -> dir.exists())
    sourceDirs.each { inputs.dir(it) }
    
    outputs.dir(docDestinationDir)
    
    jvmArgs = ['--add-exports=jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED',
        '--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED']
    main = 'jdk.javadoc.internal.tool.Main'
    args = ['-doctitle', "JGrapes OSGi Components",
        '-use',
        '-linksource',
        '-link', 'https://docs.oracle.com/en/java/javase/11/docs/api/',
        '-link', 'https://mnlipp.github.io/jdrupes-httpcodec/javadoc/',
        '-link', 'https://mnlipp.github.io/jgrapes/latest-release/javadoc/',
        '-link', 'https://docs.osgi.org/javadoc/osgi.core/7.0.0/',
        '-link', 'https://docs.osgi.org/javadoc/osgi.cmpn/7.0.0/',
        '--add-exports', 'jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED',
        '--add-exports', 'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
        '-doclet', 'org.jdrupes.mdoclet.MDoclet',
        '-docletpath', configurations.markdownDoclet.files.asType(List).join(":"),
        '--disable-auto-highlight',
        '-tagletpath', configurations.javadocTaglets.files.asType(List).join(":"),
        '-taglet', 'org.jdrupes.taglets.plantUml.PlantUml',
        '-taglet', 'org.jdrupes.taglets.plantUml.StartUml',
        '-taglet', 'org.jdrupes.taglets.plantUml.EndUml',
        '-overview', "${rootProject.file('overview.md')}",
        '-d', docDestinationDir,
        '-sourcepath', sourceDirs.join(':'),
        '-subpackages', 'org.jgrapes',
        '-bottom', rootProject.file("misc/javadoc.bottom.txt").text,
        '--allow-script-in-comments',
        '-Xdoclint:-html',
        '--main-stylesheet', "${rootProject.rootDir}/misc/stylesheet.css",
        '--add-exports=jdk.javadoc/jdk.javadoc.internal.doclets.formats.html=ALL-UNNAMED'
        ]
    
    ignoreExitValue true
}

gitPublish {
	repoUri = 'https://github.com/mnlipp/jgrapes.git'
	branch = 'gh-pages'
	contents {
		from(java11doc) {
			into 'javadoc-osgi'
		}
	}
	preserve { include '**/*' }
	commitMessage = "Updated."
}

// Until https://github.com/ajoberstar/gradle-git-publish/issues/41 is fixed
//tasks.gitPublishCopy.dependsOn javadoc

task stage {
	// Build everything first
	subprojects.tasks.findAll { tc -> tc.findByName("build") }
	   .each { tc -> dependsOn tc.findByName("build") }
	
	if (!isCiBuild || JavaVersion.current() == JavaVersion.VERSION_17) {
    	// Publish JavaDoc
    	dependsOn gitPublishPush
    }	
}

configure(stage) {
	description = 'To be executed by travis, build and update JavaDoc.'
	group = 'build'
}

apply plugin: 'eclipse'

tasks.eclipse.dependsOn(cleanEclipse)
