/*
 * Master Gradle build script
 *
 * Depends on bndPlugin property set by settings.gradle.
 * and bnd_* values from gradle.properties.
 */

import aQute.bnd.build.Workspace
import aQute.bnd.osgi.Constants

/* Add bnd gradle plugin as a script dependency */
buildscript {
    repositories {
        jcenter()
        mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath bndPlugin
    }
}

plugins {
	id "maven-publish"
	id "signing"
	id "org.jdrupes.mdoclet" version "1.0.3"
	id 'org.ajoberstar.git-publish' version '0.4.0-rc.2'
}

/* Initialize the bnd workspace */
Workspace.setDriver(Constants.BNDDRIVER_GRADLE)
Workspace.addGestalt(Constants.GESTALT_BATCH, null)

ext {
	bndWorkspace = new Workspace(rootDir, bnd_cnf).setOffline(gradle.startParameter.offline)
	cnf = rootProject.project(bnd_cnf)

	isTravisBuild = System.getenv().get("TRAVIS") == 'true'
}

// Prepare github authentication for plugins
if (System.properties['org.ajoberstar.grgit.auth.username'] == null) {
	System.setProperty('org.ajoberstar.grgit.auth.username',
		System.getenv("GH_TOKEN") ?: project.properties['github.token'] ?: "nouser")
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url 'https://jitpack.io' }
    }
	
	// Makes Eclipse-groovy handle *.gradle file properly
	apply plugin:'groovy'
}

/* Configure the subprojects */
subprojects {
	dependencies {
		compile localGroovy()
	}

	def bndProject = bndWorkspace.getProject(name)
	if (bndProject != null) {
		plugins.apply 'biz.aQute.bnd'
		
		// artifact_version is defined in cnf/bnd.bnd
		if (bnd.artifact_version) {
			project.version = bnd.artifact_version
		}
	}
	
	if (bndProject != null && project.name != "cnf") {
		apply plugin: 'signing'
		apply plugin: 'maven'
		apply plugin: 'maven-publish'

		group = "org.jgrapes"
		
		task sourcesJar(type: Jar) {
			from sourceSets.main.allJava
			classifier "sources"
		}

		task javadocJar(type: Jar) {
			from (project.rootDir) { include 'README.md' }
			classifier "javadoc"
		}
		
		artifacts {
			archives sourcesJar
			archives javadocJar
		}

		// MavenPublishing (new)

		publishing {

			repositories {
				maven {
					name "snapshot"
					url "https://oss.sonatype.org/content/repositories/snapshots/"
					credentials {
						username project.properties['sonatypeUsername'] ?: "nouser"
						password project.properties['sonatypePassword'] ?: "nopass"
					}
				}
				maven {
					name "release"
					url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
					credentials {
						username project.properties['sonatypeUsername'] ?: "nouser"
						password project.properties['sonatypePassword'] ?: "nopass"
					}
				}
			}
		}

		// Additional configuration of publishing
		apply plugin: ConfigurePublishing

		configurePublishing {
			withPomXml {
				asNode().with {
					appendNode('url', 'http://mnlipp.github.io/jgrapes/')
					appendNode('scm').with {
						appendNode('url', 'scm:git@github.com:mnlipp/jgrapes-osgi.git')
						appendNode('connection', 'scm:git@github.com:mnlipp/jgrapes-osgi.git')
						appendNode('developerConnection', 'git@github.com:mnlipp/jgrapes-osgi.git')
					}
					appendNode('licenses').with {
						appendNode('license').with {
							appendNode('name', 'GPL 3.0')
							appendNode('url', 'https://www.gnu.org/licenses/gpl-3.0.en.html')
							appendNode('distribution', 'repo')
						}
					}
					appendNode('developers').with {
						appendNode('developer').with {
							appendNode('id', 'mnlipp')
							appendNode('name', 'Michael N. Lipp')
						}
					}
				}
			}
		}
		
        apply plugin: 'eclipse'
    
        eclipse {
            classpath {
                containers 'aQute.bnd.classpath.container'
                // Classpath is completely handled by bnd container above
                minusConfigurations += [ configurations.compileClasspath,
                    configurations.testCompileClasspath ]
                downloadJavadoc = true
                downloadSources = true
            }
            project {
                // buildCommand 'org.eclipse.jdt.core.javabuilder'
                buildCommand 'bndtools.core.bndbuilder'
                // buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
                buildCommand 'net.sf.eclipsecs.core.CheckstyleBuilder'
                // 'org.eclipse.buildship.core.gradleprojectnature',
                natures 'org.eclipse.jdt.core.javanature', \
                    'bndtools.core.bndnature', \
                    'net.sf.eclipsecs.core.CheckstyleNature'
                    'org.eclipse.jdt.groovy.core.groovyNature'
            }
        }
        tasks.eclipse.dependsOn(cleanEclipse)
	}

	tasks.withType(Javadoc).all { enabled = false }	
	
	afterEvaluate {
		if(project.name == "cnf") {
			tasks.matching { it.group == "upload" ||
				it.group == "publishing" }.all {
				enabled = false
			}
		}
	}

}

configurations {
    javadocTaglets
}

dependencies {
    javadocTaglets "org.jdrupes.taglets:plantuml-taglet:1.0.+"
    // javadocTaglets "com.github.mnlipp:jdrupes-taglets:master-SNAPSHOT"
}

javadoc {
	
	options.tagletPath = configurations.javadocTaglets.files as List
	options.taglets = ["org.jdrupes.taglets.plantUml.Taglet"]
	
	classpath = files(subprojects.collect {project ->
		project.sourceSets.main.compileClasspath})
	source subprojects.collect {project -> project.sourceSets.main.allJava }
	options.addStringOption("doctitle", "JGrapes OSGi Components")
	options.addStringOption("overview", "overview.md")
	inputs.file "overview.md"
	options.addBooleanOption("use", true)
	options.addBooleanOption("linksource", true)
	options.stylesheetFile(file("stylesheet.css"))
	options.addStringOption("bottom", file("misc/javadoc.bottom.txt").text)
	options.links "https://docs.oracle.com/javase/8/docs/api/"
	destinationDir = file("../jgrapes.gh-pages/javadoc-osgi")
}

gitPublish {
	repoUri = 'https://github.com/mnlipp/jgrapes.git'
	branch = 'gh-pages'
	contents {
		from(javadoc) {
			into 'javadoc-osgi'
		}
	}
	preserve { include '**/*' }
	commitMessage = "Updated."
}

// Until https://github.com/ajoberstar/gradle-git-publish/issues/41 is fixed
tasks.gitPublishCopy.dependsOn javadoc

task stage {
	// Build everything first
	subprojects.tasks.each { tc -> dependsOn tc.findByName("build") }
	// Publish JavaDoc
	dependsOn gitPublishPush	
}

configure(stage) {
	description = 'To be executed by travis, build and update JavaDoc.'
	group = 'build'
}

task wrapper(type: Wrapper) {
  jarFile = rootProject.file('.gradle-wrapper/gradle-wrapper.jar')
}

apply plugin: 'eclipse'

tasks.eclipse.dependsOn(cleanEclipse)
